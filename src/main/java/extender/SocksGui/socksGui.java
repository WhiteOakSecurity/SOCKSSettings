/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package extender.SocksGui;

import burp.api.montoya.MontoyaApi;
import burp.api.montoya.logging.Logging;

/**
 *
 * @author karllll
 */

public class socksGui extends javax.swing.JPanel {
    public String socksHost = "";
    public String socksPort = "";
    public String useDNS = "";
    public String useProxy = "";
    private final MontoyaApi api;
    /**
     * Creates new form socksGui
     */
    public socksGui(MontoyaApi api) {
        
        
        initComponents();
        this.api = api;
        
        //Get current settings at load and set inputs properly.

        refreshExtension(api);
        
        
        
    }
    
    public void refreshExtension(MontoyaApi api) {
        getSocksSettings(api);
        jTextField1.setText(socksHost);
        jTextField2.setText(socksPort);
        jToggleButton1.setSelected(Boolean.parseBoolean(useProxy));
        jToggleButton2.setSelected(Boolean.parseBoolean(useDNS));
        if(jToggleButton1.isSelected()){
            jToggleButton1.setText("SOCKS Proxy ENABLED");
        } else {
            jToggleButton1.setText("SOCKS Proxy DISABLED");
        }
        if(jToggleButton2.isSelected()){
            jToggleButton2.setText("DNS lookups over SOCKS proxy ENABLED");
        } else {
            jToggleButton2.setText("DNS lookups over SOCKS proxy DISABLED");
        }
        
        
    }  

    
    public void getSocksSettings(MontoyaApi api){
        //String substitution is easier than importing additional libraries.


        socksHost = api.burpSuite().exportUserOptionsAsJson("user_options.connections.socks_proxy.host");
        String fixedSocksHost = socksHost.replaceAll("(?s).*\"host\":\"","");
        fixedSocksHost = fixedSocksHost.replaceAll("(?s)\".*","");
        socksHost = fixedSocksHost;

        socksPort = api.burpSuite().exportUserOptionsAsJson("user_options.connections.socks_proxy.port");
        String fixedSocksPort = socksPort.replaceAll("(?s).*\"port\":","");
        fixedSocksPort = fixedSocksPort.replaceAll("(?s)\n.*","");
        socksPort = fixedSocksPort;
        
        useDNS = api.burpSuite().exportUserOptionsAsJson("user_options.connections.socks_proxy.dns_over_socks");
        String fixedUseDNS = useDNS.replaceAll("(?s).*dns_over_socks\":", "");
        fixedUseDNS = fixedUseDNS.replaceAll("(?s)\n.*","");
        useDNS = fixedUseDNS;
        
        useProxy = api.burpSuite().exportUserOptionsAsJson("user_options.connections.socks_proxy.use_proxy");
        String fixedUseProxy = useProxy.replaceAll("(?s).*use_proxy\":", "");
        fixedUseProxy = fixedUseProxy.replaceAll("(?s)\n.*","");
        useProxy = fixedUseProxy;
        
        
    }
    
    public void setSocksSettings(MontoyaApi api){
       
        //Reconstruct each variable back into its previous format. 
        String socksHostPrefix = "{\"user_options\":{\"connections\":{\"socks_proxy\":{\"host\":\"";
        String socksHostSuffix = "\"}}}}";
        String reconstitutedSocksHost = socksHostPrefix + socksHost + socksHostSuffix;
        
        
        String socksPortPrefix = "{\"user_options\":{\"connections\":{\"socks_proxy\":{\"port\":";
        String socksPortSuffix = "}}}}";
        String reconstitutedSocksPort = socksPortPrefix + socksPort + socksPortSuffix;
        
        
        String useProxyPrefix = "{\"user_options\":{\"connections\":{\"socks_proxy\":{\"use_proxy\":";
        String useProxySuffix = "}}}}";
        String reconstitutedUseProxy = useProxyPrefix + useProxy + useProxySuffix;
        
        
        String useDNSPrefix = "{\"user_options\":{\"connections\":{\"socks_proxy\":{\"dns_over_socks\":";
        String useDNSSuffix = "}}}}";
        String reconstitutedUseDNS = useDNSPrefix + useDNS + useDNSSuffix;
        
        api.burpSuite().importUserOptionsFromJson(reconstitutedSocksHost);
        api.burpSuite().importUserOptionsFromJson(reconstitutedSocksPort);
        api.burpSuite().importUserOptionsFromJson(reconstitutedUseDNS);
        api.burpSuite().importUserOptionsFromJson(reconstitutedUseProxy);
        
        //Logging logging = api.logging();
        //logging.logToOutput(reconstitutedSocksHost);
        //logging.logToOutput(reconstitutedSocksPort);
        //logging.logToOutput(reconstitutedUseProxy);
        //logging.logToOutput(reconstitutedUseDNS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jToggleButton1.setText("SOCKS Proxy is (Enabled/Disabled)");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("jToggleButton2UseDNS");
        jToggleButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("SOCKS Host:");

        jTextField1.setText("jTextField1");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        jLabel2.setText("SOCKS Port:");

        jTextField2.setText("jTextField2");
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        jButton1.setText("REFRESH / SET");
        jButton1.setActionCommand("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(159, 159, 159))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        //Logging logging = api.logging();
        //logging.logToOutput("jToggleButton2 pressed");
        
        if(jToggleButton2.isSelected()){
            useDNS = "true";
        } else {
            useDNS = "false";
        }
        setSocksSettings(api);
        refreshExtension(api);
        
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Logging logging = api.logging();
        logging.logToOutput("Refreshing...");
        refreshExtension(api);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        //Logging logging = api.logging();
        //logging.logToOutput("jToggleButton1 pressed");
        // TODO add your handling code here:
        if(jToggleButton1.isSelected()){
            useProxy = "true";
        } else {
            useProxy = "false";
        }
        setSocksSettings(api);
        refreshExtension(api);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        socksPort = jTextField2.getText().replaceAll("[^0-9]", "");
        //api.logging().logToOutput("socks Port entered:" + socksPort);
        setSocksSettings(api);
        refreshExtension(api);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2FocusLost

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
            // TODO add your handling code here:
        socksHost = jTextField1.getText();
        setSocksSettings(api);
        refreshExtension(api);
    }//GEN-LAST:event_jTextField1FocusLost

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        refreshExtension(api);
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
}
